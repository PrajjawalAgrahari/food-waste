# Map View Implementation for Food Surplus Listings

To implement a map view showing nearby surplus food listings with clustering in your food delivery application, you'll need to work with mapping services, geolocation, and clustering algorithms. Here's how to approach this:

## Core Components

1. **Mapping Library** - You'll need a mapping solution like Google Maps, Mapbox, or Leaflet.js
2. **Geolocation** - To determine the user's current location
3. **Clustering Algorithm** - To group nearby items when zoomed out
4. **Backend API** - To retrieve surplus food listings with location data

## Implementation Steps

### 1. Set Up the Map

First, integrate a mapping library into your application:

```javascript
// Using Google Maps example
function initMap() {
  const map = new google.maps.Map(document.getElementById("map"), {
    center: { lat: 40.7128, lng: -74.0060 }, // Default location (New York)
    zoom: 13,
  });
  
  // Get user's location
  if (navigator.geolocation) {
    navigator.geolocation.getCurrentPosition(
      (position) => {
        const userLocation = {
          lat: position.coords.latitude,
          lng: position.coords.longitude,
        };
        map.setCenter(userLocation);
        
        // After getting location, load nearby listings
        loadNearbyListings(map, userLocation);
      },
      () => {
        // Handle location error
        loadNearbyListings(map, map.getCenter());
      }
    );
  } else {
    // Browser doesn't support geolocation
    loadNearbyListings(map, map.getCenter());
  }
}
```

### 2. Fetch Nearby Listings

Create a function to fetch nearby surplus food listings:

```javascript
function loadNearbyListings(map, location) {
  // Calculate search radius based on zoom level
  const radius = calculateSearchRadius(map.getZoom());
  
  // API call to your backend
  fetch(`/api/surplus-listings?lat=${location.lat}&lng=${location.lng}&radius=${radius}`)
    .then(response => response.json())
    .then(listings => {
      // Create markers and clusters
      createMarkersAndClusters(map, listings);
    })
    .catch(error => {
      console.error("Error fetching listings:", error);
    });
}
```

### 3. Implement Clustering

Add clustering to group markers when zoomed out:

```javascript
function createMarkersAndClusters(map, listings) {
  // Initialize marker clusterer (using MarkerClusterer for Google Maps)
  const markers = [];
  const infoWindows = [];
  
  // Create a marker for each listing
  listings.forEach(listing => {
    const marker = new google.maps.Marker({
      position: { lat: listing.latitude, lng: listing.longitude },
      map: map,
      title: listing.name,
      icon: customMarkerIcon(listing.category) // Optional custom marker
    });
    
    // Create info window for the marker
    const infoWindow = new google.maps.InfoWindow({
      content: createInfoWindowContent(listing)
    });
    
    // Add click listener to open info window
    marker.addListener("click", () => {
      infoWindows.forEach(iw => iw.close()); // Close any open info windows
      infoWindow.open(map, marker);
    });
    
    markers.push(marker);
    infoWindows.push(infoWindow);
  });
  
  // Add markers to clusterer
  const markerCluster = new MarkerClusterer(map, markers, {
    imagePath: "https://developers.google.com/maps/documentation/javascript/examples/markerclusterer/m",
    maxZoom: 15, // Clusters will split into individual markers at this zoom level
    gridSize: 50 // Pixel size of the grid for clustering
  });
}
```

### 4. Create Info Window Content

Design the content displayed when a user clicks on a marker:

```javascript
function createInfoWindowContent(listing) {
  return `
    <div class="listing-info">
      <h3>${listing.name}</h3>
      <p>${listing.description}</p>
      <p>Price: $${listing.price}</p>
      <p>Available until: ${new Date(listing.expiryTime).toLocaleTimeString()}</p>
      <button onclick="orderItem(${listing.id})">Order Now</button>
    </div>
  `;
}
```

### 5. Optimizations for User Experience

Enhance user experience with these additional features:

```javascript
// Adjust search radius based on zoom level
function calculateSearchRadius(zoomLevel) {
  // The higher the zoom, the smaller the radius
  return Math.pow(2, 20 - zoomLevel) * 100; // in meters
}

// Update listings when map is moved
map.addListener("idle", () => {
  // Get new center and load new listings
  const center = map.getCenter();
  loadNearbyListings(map, {
    lat: center.lat(),
    lng: center.lng()
  });
});

// Custom marker icons based on food category
function customMarkerIcon(category) {
  const icons = {
    "bakery": "path/to/bakery-icon.png",
    "restaurant": "path/to/restaurant-icon.png",
    "grocery": "path/to/grocery-icon.png",
    "default": "path/to/default-icon.png"
  };
  
  return {
    url: icons[category] || icons.default,
    scaledSize: new google.maps.Size(32, 32)
  };
}
```

## Backend Considerations

Your backend API needs to:

1. Store geolocation data for all surplus food items
2. Support geospatial queries to find items within a radius
3. Consider using a database with geospatial indexes (MongoDB, PostgreSQL with PostGIS)

Example backend query in MongoDB:

```javascript
// Express route example
app.get('/api/surplus-listings', async (req, res) => {
  const { lat, lng, radius } = req.query;
  
  try {
    const listings = await SurplusListing.find({
      location: {
        $near: {
          $geometry: {
            type: "Point",
            coordinates: [parseFloat(lng), parseFloat(lat)]
          },
          $maxDistance: parseInt(radius) // in meters
        }
      },
      // Only show available items
      expiryTime: { $gt: new Date() }
    });
    
    res.json(listings);
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});
```

## Performance Tips

1. Implement lazy loading - only fetch listings visible in the current map view
2. Cache recent results to reduce API calls
3. Set appropriate limits on the number of markers shown at once
4. Use vector tiles for large datasets
5. Consider server-side clustering for very large datasets

Would you like more specific information about any part of this implementation?